// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using exam2.Data;

#nullable disable

namespace exam2.Migrations
{
    [DbContext(typeof(RailwayDbContext))]
    partial class RailwayDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("exam2.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4741),
                            Latitude = 50.450099999999999,
                            Longitude = 30.523399999999999,
                            Name = "Kyiv",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4824)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4833),
                            Latitude = 49.839700000000001,
                            Longitude = 24.029699999999998,
                            Name = "Lviv",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4836)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4841),
                            Latitude = 46.482500000000002,
                            Longitude = 30.723299999999998,
                            Name = "Odesa",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4843)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4900),
                            Latitude = 48.464700000000001,
                            Longitude = 35.046199999999999,
                            Name = "Dnipro",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4902)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4907),
                            Latitude = 49.993499999999997,
                            Longitude = 36.230400000000003,
                            Name = "Kharkiv",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4909)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4913),
                            Latitude = 47.838799999999999,
                            Longitude = 35.139600000000002,
                            Name = "Zaporizhzhia",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4915)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4920),
                            Latitude = 46.975000000000001,
                            Longitude = 31.994599999999998,
                            Name = "Mykolaiv",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4922)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4926),
                            Latitude = 49.2331,
                            Longitude = 28.4682,
                            Name = "Vinnytsia",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4928)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4933),
                            Latitude = 49.588299999999997,
                            Longitude = 34.551400000000001,
                            Name = "Poltava",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4935)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4939),
                            Latitude = 51.498199999999997,
                            Longitude = 31.289300000000001,
                            Name = "Chernihiv",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4941)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4945),
                            Latitude = 48.290799999999997,
                            Longitude = 25.9345,
                            Name = "Chernivtsi",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4947)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4951),
                            Latitude = 46.635399999999997,
                            Longitude = 32.616900000000001,
                            Name = "Kherson",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4953)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4957),
                            Latitude = 48.922600000000003,
                            Longitude = 24.7103,
                            Name = "Ivano-Frankivsk",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4959)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4963),
                            Latitude = 50.907699999999998,
                            Longitude = 34.798099999999998,
                            Name = "Sumy",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4965)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4969),
                            Latitude = 49.5535,
                            Longitude = 25.594799999999999,
                            Name = "Ternopil",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4971)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4975),
                            Latitude = 48.620800000000003,
                            Longitude = 22.2879,
                            Name = "Uzhhorod",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4977)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4981),
                            Latitude = 50.264899999999997,
                            Longitude = 28.6767,
                            Name = "Zhytomyr",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4983)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4987),
                            Latitude = 50.619900000000001,
                            Longitude = 26.2516,
                            Name = "Rivne",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4989)
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4993),
                            Latitude = 50.747199999999999,
                            Longitude = 25.325399999999998,
                            Name = "Lutsk",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4995)
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(4998),
                            Latitude = 48.507899999999999,
                            Longitude = 32.262300000000003,
                            Name = "Kropyvnytskyi",
                            UpdatedAt = new DateTime(2024, 7, 14, 20, 52, 2, 666, DateTimeKind.Local).AddTicks(5000)
                        });
                });

            modelBuilder.Entity("exam2.Entities.Journey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityArrivalId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityDepartureId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateDispatch")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CityArrivalId");

                    b.HasIndex("CityDepartureId");

                    b.HasIndex("DateDispatch")
                        .IsUnique();

                    b.ToTable("Journeys");
                });

            modelBuilder.Entity("exam2.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPurchased")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JourneyId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seat")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsPurchased")
                        .IsUnique();

                    b.HasIndex("JourneyId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("exam2.Entities.Journey", b =>
                {
                    b.HasOne("exam2.Entities.City", "CityArrival")
                        .WithMany("JourneysArriving")
                        .HasForeignKey("CityArrivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("exam2.Entities.City", "CityDeparture")
                        .WithMany("JourneysDeparting")
                        .HasForeignKey("CityDepartureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityArrival");

                    b.Navigation("CityDeparture");
                });

            modelBuilder.Entity("exam2.Entities.Ticket", b =>
                {
                    b.HasOne("exam2.Entities.Journey", "Journey")
                        .WithMany("Tickets")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("exam2.Entities.City", b =>
                {
                    b.Navigation("JourneysArriving");

                    b.Navigation("JourneysDeparting");
                });

            modelBuilder.Entity("exam2.Entities.Journey", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
